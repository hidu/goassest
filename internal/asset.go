// Generated by goasset(1.0 20200330) or "go generate" . DO NOT EDIT.
// https://github.com/hidu/goasset/

package internal

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"
)

// AssetFile one asset file
type AssetFile interface {
	Name() string
	ModTime() time.Time
	Content() []byte
	ContentGzip() []byte
}

// assetFile asset file  struct
type assetFile struct {
	name        string
	mtime       time.Time
	content     []byte
	contentGzip []byte
}

func (af *assetFile) Name() string {
	return af.name
}
func (af *assetFile) ModTime() time.Time {
	return af.mtime
}

func (af *assetFile) Content() []byte {
	return af.content
}
func (af *assetFile) ContentGzip() []byte {
	return af.contentGzip
}

var _ AssetFile = &assetFile{}

// AssetFiles asset files
type AssetFiles interface {
	GetAssetFile(name string) (AssetFile, error)
	GetContent(name string) []byte
	GetFileNames(dir string) []string

	FileHandlerFunc(name string) http.HandlerFunc
	HTTPHandler(baseDir string) http.Handler
}

// assetFiles asset files
type assetFiles struct {
	Files map[string]*assetFile
}

var _assetDirect bool

var _assetCwd, _ = os.Getwd()

// GetAssetFile get file by name
func (afs *assetFiles) GetAssetFile(name string) (AssetFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assetDirect {
		assetFilePath := filepath.Join(_assetCwd, name)
		f, err := os.Open(assetFilePath)
		log.Println("[goasset] Asset Direct, name=", name, "assetPath=", assetFilePath, "err=", err)

		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}

			helper := newAssetHelper()
			contentNew, errHelper := helper.Execute(assetFilePath, content, "")
			if errHelper != nil {
				return nil, errHelper
			}
			return &assetFile{
				content: contentNew,
				name:    name,
				mtime:   info.ModTime(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := afs.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (afs *assetFiles) GetContent(name string) []byte {
	s, err := afs.GetAssetFile(name)
	if err != nil {
		return []byte("")
	}
	return s.Content()
}

// GetFileNames get all file names
func (afs *assetFiles) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, 0, len(afs.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range afs.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
// 若目录名称 为 *private 则不允许通过web访问
func (afs *assetFiles) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private/") {
		return http.NotFound
	}
	return afs.FileHandlerFuncAll(name)
}

// FileHandlerFuncAll handler http files
// 无 private 目录规则
func (afs *assetFiles) FileHandlerFuncAll(name string) http.HandlerFunc {
	name = filepath.ToSlash(name)
	file, err := afs.GetAssetFile(name)
	return func(writer http.ResponseWriter, req *http.Request) {
		if err != nil {
			http.NotFound(writer, req)
			return
		}
		modifiedSince := req.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && file.ModTime().Before(t) {
				writer.Header().Del("Content-Type")
				writer.Header().Del("Content-Length")
				writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))
				writer.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(file.Name()))
		if mimeType != "" {
			writer.Header().Set("Content-Type", mimeType)
		}
		writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))

		gzipContent := file.ContentGzip()

		if len(gzipContent) > 0 && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			writer.Header().Set("Content-Encoding", "gzip")
			writer.Write(gzipContent)
		} else {
			writer.Write(file.Content())
		}
	}
}

// HTTPHandler handler http request
// eg:on file system is :/res/js/a.js and request is /res/js/a.js
// http.Handle("/res/",res.Asset.HttpHandler("/"))

// eg:on file system is :/res/js/a.js and request is /js/a.js
// http.Handle("/js/",res.Asset.HttpHandler("/res/"))
func (afs *assetFiles) HTTPHandler(baseDir string) http.Handler {
	return &_assetFileServer{sf: afs, pdir: baseDir}
}

type _assetFileServer struct {
	sf   *assetFiles
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assetFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(name).ServeHTTP(w, r)
}

var _ AssetFiles = &assetFiles{}

var _ = flag.String
var _ = runtime.Version()

// ---------------------------helper.go--------begin--------------------------//

func newAssetHelper() *assetHelper {
	helper := &assetHelper{}

	helper.Regs = make(map[string]*regexp.Regexp)
	helper.Regs["remove_above"] = regexp.MustCompile(`[\S\s]*?//\s*asset_remove_above\(\s*\)`)
	helper.Regs["remove"] = regexp.MustCompile(`//\s*asset_remove_start\(\s*\)[\S\s]*?//\s*asset_remove_end\(\s*\)`)
	helper.Regs["include"] = regexp.MustCompile(`//\s*asset_include\(([^)]+?)\)`)

	helper.RegisterFn("remove_above", helper.RemoveAbove)
	helper.RegisterFn("include", helper.Include)
	helper.RegisterFn("remove", helper.Remove)

	return helper
}

type assetHelperFn func(fileName string, content []byte) ([]byte, error)

type assetHelper struct {
	Fns  []map[string]assetHelperFn
	Regs map[string]*regexp.Regexp
}

// RegisterFn 注册helper方法
func (h *assetHelper) RegisterFn(name string, fn assetHelperFn) {
	h.Fns = append(h.Fns, map[string]assetHelperFn{name: fn})
}

// Execute 执行所有的helper方法
func (h *assetHelper) Execute(fileAbsPath string, content []byte, skipFnName string) (contentNew []byte, err error) {
	contentNew = make([]byte, len(content))
	copy(contentNew, content)

	for _, fnInfo := range h.Fns {
		for name, fn := range fnInfo {
			if name == skipFnName {
				continue
			}
			contentNew, err = fn(fileAbsPath, contentNew)
			if err != nil {
				return nil, fmt.Errorf("%s,current file is: %s", err.Error(), fileAbsPath)
			}
		}
	}

	return contentNew, nil
}

// RemoveAbove 删除在此标记之前的内容
// eg: \/\/ asset_remove_above()
func (h *assetHelper) RemoveAbove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove_above"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

// Remove remove 方法, 删除指定区间里的内容
// eg: \/\/asset_remove_start() 中间的内容被删除 \/\/ asset_remove_end()
func (h *assetHelper) Remove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

func (h *assetHelper) include(fileAPath string, content []byte, includeFiles map[string]map[string]bool) (contentNew []byte, err error) {

	fileAPath = filepath.Clean(fileAPath)
	includeFiles[fileAPath] = make(map[string]bool)

	contentNew = h.Regs["include"].ReplaceAllFunc(content, func(matchData []byte) []byte {
		idx := bytes.Index(matchData, []byte("("))
		name := bytes.TrimSpace(matchData[idx+1 : len(matchData)-1])
		if len(name) == 0 {
			err = fmt.Errorf("asset_include with empty param")
			return []byte(err.Error())
		}
		fileBPath := filepath.Join(filepath.Dir(fileAPath), string(name))

		if bFiles, hasB := includeFiles[fileBPath]; hasB {
			if _, hasA := bFiles[fileAPath]; hasA {
				err = fmt.Errorf("asset_include error: cyclic include,%s include(%s)", fileAPath, string(name))
				return []byte(err.Error())
			}
		}
		includeFiles[fileAPath][fileBPath] = true

		includeFiles[fileBPath] = make(map[string]bool)

		bContent, errRead := ioutil.ReadFile(fileBPath)
		if errRead != nil {
			err = errRead
			return []byte(err.Error())
		}

		b1Content, errB1 := h.Execute(fileBPath, bContent, "include")
		if errB1 != nil {
			err = errB1
			return []byte(err.Error())
		}

		cContent, errInclude := h.include(fileBPath, b1Content, includeFiles)
		if errInclude != nil {
			err = errInclude
			return []byte(err.Error())
		}
		return cContent
	})

	if err != nil {
		return nil, err
	}
	return contentNew, nil
}

// Include 将另外一个资源文件包含到当前文件里
// eg: \/\/ asset_include(a.tpl)
func (h *assetHelper) Include(fileAPath string, content []byte) (contentNew []byte, err error) {
	// 用于检查循环include
	includeFiles := make(map[string]map[string]bool)
	return h.include(fileAPath, content, includeFiles)
}

// ---------------------------helper.go--------finish-------------------------//

// Asset export assets
var Asset AssetFiles

func init() {

	var _assetGzipDecode = func(data []byte, fileName string) []byte {
		gzipReader, errGzip := gzip.NewReader(bytes.NewBuffer(data))
		if errGzip != nil {
			panic(fmt.Sprintf("[goasset](%s) gzip decode failed,err=%s", fileName, errGzip.Error()))
		}
		defer gzipReader.Close()
		buf, errReader := ioutil.ReadAll(gzipReader)
		if errReader != nil {
			panic(fmt.Sprintf("[goasset](%s) read decode content failed,err=%s", fileName, errReader.Error()))
		}
		return buf
	}

	var _assetBase64Decode = func(txt string, fileName string) []byte {
		txt = strings.ReplaceAll(txt, "\n", "")
		bf, err := base64.StdEncoding.DecodeString(txt)
		if err != nil {
			panic(fmt.Sprintf("[goasset](%s) base64 decode failed,err=%s", fileName, err.Error()))
		}
		return bf
	}

	asset := &assetFiles{Files: map[string]*assetFile{}}
	Asset = asset

	{
		// 0 mtime: 2020-01-10 18:36:22 , size: 5684
		fileName := "/template/asset_tpl.go"
		contentBase64 := `
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
//8BAAD//7L7tmpEKgAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1578652582, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 1 mtime: 2019-10-07 11:50:05 , size: 77
		fileName := "/template/demo_config.json"
		contentBase64 := `
H4sIAAAAAAAA/6rmUlBQKi5KVrJSKkotzi8tSk7VV9IBCaakFpcgiyYWF6eW6KXnQ2QLEpOzE9NTkRQocdUCAAAA//8BAAD//2RKZxFNAAAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570420205, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 2 mtime: 2019-11-23 21:23:27 , size: 912
		fileName := "/template/footer.tpl"
		contentBase64 := `
H4sIAAAAAAAA/5RUzY7bNhA+i08xJbILqVC1QVH0IECH3U26pyZAjPbiGg5tjRQCNOmSVNaxzHcvhpTldYsGiQ+GOJyf74cY1g16C1JLnxcjY9k4yg40QtXi
ZuiB8xBYBgCAB3wndgh1A51UuBf+U/UgHObGVU/oUX/O+ZoXBYPpd3cHRqsvgFpsFMKz9J+gN2AHPafIbm7bNMB7w+F0gtwO2ssdVk/v3y/ixbPUrXl2HG5v
wXkrde+qR6O9kNrR/Hvbu+XrVUktftoMUrW8KGCc59CvU6KvHoxRfwqb366Fc+jfSItbH8vieR1Jr8cxsQ+Bl9AJ5bAE3hkLMVpaFC3EfGhjA34hHUhB1G0I
LMYY+ywspGlPR7l/g1vTIjRAsuet8AKWq80Xj2VUNUqRGBbTBYws649y/wFFi7YEtJYakQ8Urt7hc7rKKdvR+WHoOrSxe1GwjFSein5oQEtFLbO90HKbdztf
LfZWat/lfDnJsMpvXBG7Q5vwdkIqbEu0trlx/IJ1hlO9tdbYvKB5gWUtdmjhArt6VMZhXrBsM3SxKMWJhTSDl6qiwL1S+aVohj7lfg/46NEEfmu0R+2/TmLC
eU3Doh+shs3QsfDSSXr3v/5y7aU/+Mm5r1pJac38iD/gXoktEm9/oIf4l+YlcE5CJZ1IoU0cVy18+1ZvTSt1X6XZi9iGSmetvkul1PibTP4fZaIwLIs96wZu
48dvUqEb438NO7FfJrqrH+fbkbbKPZ2aGIuLxwrdI7yS7aF8RbOJekUfjrLHtIbu7mAcKScE2NGWqOlMWdXvdDx597PzNgQowcnji+uFPOJ5mZ2p1c35lk6n
pBLwm7/ntTc9nuR43Xw85z+m+EkZ3a/9wa+7nQ/hI2NZNpU8Hevmv88lv2pYnoEULMuMRtKmbi4qkouZJqCzGRRJxOOO/EPLQ36lQAjl6yKmTaPqf6+ffEZ4
mf+ygDLrSw7LyPHkcRVdXZ7LVs0EOj6K8+YL7B8AAAD//wEAAP//O6i8jlYGAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1574515407, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 3 mtime: 2019-11-02 19:27:22 , size: 869
		fileName := "/template/footer_fn.go"
		contentBase64 := `
H4sIAAAAAAAA/5SRQWvjMBCFz/avmDUEZDA6LXtY8GGzDb3lkBzTUGRrZASKbEbjNk3Jfy+yXac5NDRHjWbefPNemr4ogmcVAvLjyXYPWLcaoQTT+1poxQp2
++qNsQBjHa7VASEwWd/k0we8p0lzst0GlUYqAImiEPwtIZblGl/HLxG7Q3wve2OQBvU8TxNr5qFfJXjromTSKW9rYQ4stx1Zz0Zku6YdQPdiEfJBHfTIa5R1
qAskKhchu7DOOHJF1JLI475zmmg0SHDBlv9dG1DkaVL1Zhga6/EK2/ZsnYyFf86Jy9CMPvXeA0+o9Cd83XpGz7ePmDivzyDknjxUvUnPX5NcqoB/fl9nyUee
krsZZWwrp3qQG+ycqjHezUcuIHvyWQFZFo0afYoOVcM6uWW98nWrrW/kuHs7yMTR2au7XBqFfxTyN85EYz4AAAD//wEAAP//q/NnTeQCAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572694042, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 4 mtime: 2020-03-30 17:08:57 , size: 131
		fileName := "/template/header.tpl"
		contentBase64 := `
H4sIAAAAAAAA/yzMsQrCMBCH8T1P8ac46JLbnSviYpe+QNoelyD2SnIVpOTdRcj2DR8/Itx55RyMF0xfiIZS2M7HcfIfziXpWusFmtGJQtrawaMf8BxG3PrH
6B0RotlWrkSSLO6Tn/VNMS07NZGc28L8CsL4261rde4HAAD//wEAAP//RsZntIMAAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1585559337, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 5 mtime: 2019-11-02 18:37:45 , size: 3889
		fileName := "/template/helper.go"
		contentBase64 := `
H4sIAAAAAAAA/7RXX2sbxxd91n6K+xP4x46zlapXBRGsJKIuNBSnb5LqrFYja8lqtOyOYhkj8INjx1RJA20dagJNW7c1CXENSYvt0n4a7dr+FmX+7O7IWtkq
pU/Wzty598y5Z86MNa3VIxYQvLrg+5h+hB0XezqCeTP5hHUt0xa/iiX4vzKzPtCiqdwSXvGhBB3zIdY7plv1qWeTlfq8h1dw32XTuO+isfBq1sOd7iO8bDa6
j3C2DiWQ0Z/0fHq723FtB+sPqrX7Nb8+fyufr/kC17K6rqbX/PkaepCee2rWyWw+NT0qs02viUlzWkWbWE6vOVNJGVrT9ernqH7jFuLp1Hy2T7FXIfo4RwbE
EWx0gQ2i1GURmHjFohhIj5ZkXUrPEHmY9jwix7WBptE1F4MiggoBpiG9ZTv4ntnBIDpvgNUlFBMK1XpjjWIEuvhhAPa8rocmM7GVPYsyvVWID1CtK0Iaq6hl
uNym6ozhzOch2SGE7w6CraHYRbh7Er77Rihfb49pHSlrdKLupkXGN434scgxoCUwXReTps4/DZiGep0lLEKLDJAEeLePrR7FEO78cv79MNzZCF/unO1tzgBT
ruSsLzT8T03ankK8Af5D260QpTcIdBlzD6+C0hbZGrY1JUCe6ijOwSRajhALdNeUdHF5Jp5W14Nlxt0iaXWZe3gmWcEgaFvXMjyAscL5jedlPAvI2C0eAKWS
ug8+xTHapIfZx0CTAxEMtp0StIhKUQzuHl5FMjuL+18JiO3IrFLxxHYMaHVo7i7jpKVn53zD6nkeY5alBNsvwpyf5ZVEkI4MUKqhCNdAywySo6SCJLYTazU+
0BA8eXXx7X7w8iB8ux++2j4/PBqdfBHsPD3b2wy2HgeHJ2wBXilCLV/Lw6Ql6miquOMiMyjnH8uknWrruSXsOqaFFxwnymfIbHo2yyQ0AzEgcoI4FIakKBxu
B4d7wfD04sX7i+1hKj+THq8jGB2/vXjxPo4//+GNSJjCKDvYV/P531P570hMxy4vCAH+Sv+QkRXbwWOeq/xsdLvODHvUMkm1Ej8qrknbudsONkkCBGkZtWQ1
nqinPDB4ZW0Ke/GNrNBXYZdVTCG/ujomtdp3TGrG3RJ/uSHYzT5zJvbt5xZJE/eT+KQFOu9BhltVHP2ZZ3fuu6aFkxVVu9m/UYAid9F4FH1QqLPldouPsyyI
Od6HwpKklSleNPaKgFWbtgF3XLoGrumZnSx3HikIiVAxKSQsifeizHtRVJrxcdcWveBfd2xPaYwhNSIQMtoZ5AZvkwFt0y+zVBPN40XqN0VA5OrLfMECZ+ty
n2+KKeHH1+2eq6sI1prl2FZU3JjzY4XP+SgrjVlcAuObyFzHVeTh01Sp7BFKQL0e1tKCy9dJONO4HckSe94SNpuczW6P2k6OfbJcepxKCiYKVe8wQZmcmUEL
rHZBLV4usNLtnPrMKAvyEpDx8UqQlAvpOMqF2VBYKgj5YhVIVLuKkCSQVbITNFGCVEhycqaTEnmrrKdlBqxfk48H9emAPY9d+1dfbhHC4Ggr+PLnYH93dLwx
On59/ttmePo83N0e/fF7MHwcPH8TPDkK/vwq2HkqBi+2hylvgIgjM0ddZ9qdtTij789yZeXzcPb1wej0WfjjRvjdT8Ffr8+e/WpHxI7dG8VJ3U8cgfifjdzE
5RSju9zrgfY3AAAA//8BAAD//zR/kcTEDgAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572691065, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 6 mtime: 2019-11-02 18:26:12 , size: 2944
		fileName := "/template/helper_test.go"
		contentBase64 := `
H4sIAAAAAAAA/zyQzWrrMBCF1zNPMVcQkEEo+0AW4RJooKtuS6H+GdmmieRKk9il+N2LZNrtOZ/OJwbrlFjw3SAAnJeJWzmQKqHK2WoQVkQY+DpxpMORPM+n
XD+VRFeI4EKksVsMtXXii/Atc7H2PZck0TcCiH0OvdPKh5ni3ZdG77pKmfy2QoDGGeJYJJvOvvAtPPjUhAdrZe1eOElXS71vrCyiDL2+NV/C+tdrL366S5XH
Rle2/h3Jj9fyARB7jjFEp1XmaR5lyEyIB9olVdwbocvCigB/w/8Hbj+2+5w/tRhKEkff68ZldsUVfwAAAP//AQAA///AEt/xSgEAAA==`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572690372, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

}
