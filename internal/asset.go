package internal

// Generated by goasset(1.0 20191009). DO NOT EDIT.
// https://github.com/hidu/goasset/

import (
	"bytes"
	"compress/gzip"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"
)

// AssetFile one asset file
type AssetFile interface {
	Name() string
	ModTime() time.Time
	Content() []byte
	ContentGzip() []byte
}

// assetFile asset file  struct
type assetFile struct {
	name        string
	mtime       time.Time
	content     []byte
	contentGzip []byte
}

func (af *assetFile) Name() string {
	return af.name
}
func (af *assetFile) ModTime() time.Time {
	return af.mtime
}

func (af *assetFile) Content() []byte {
	return af.content
}
func (af *assetFile) ContentGzip() []byte {
	return af.contentGzip
}

var _ AssetFile = &assetFile{}

// AssetFiles asset files
type AssetFiles interface {
	GetAssetFile(name string) (AssetFile, error)
	GetContent(name string) []byte
	GetFileNames(dir string) []string

	FileHandlerFunc(name string) http.HandlerFunc
	HTTPHandler(baseDir string) http.Handler
}

// assetFiles asset files
type assetFiles struct {
	Files map[string]*assetFile
}

var _assetDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	// only enable with go run
	if exeName == "go" || (runtime.GOOS == "windows" && strings.Contains(os.Args[0], "go-build")) {
		flag.BoolVar(&_assetDirect, "asset_direct", false, "for debug,read asset direct")
	}
}

var _assetCwd, _ = os.Getwd()

// GetAssetFile get file by name
func (afs *assetFiles) GetAssetFile(name string) (AssetFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assetDirect {
		assetFilePath := filepath.Join(_assetCwd, name)
		f, err := os.Open(assetFilePath)
		log.Println("Asset Direct, name=", name, "assetPath=", assetFilePath, "err=", err)

		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}

			helper := newAssetHelper()
			contentNew, errHelper := helper.Execute(assetFilePath, content, "")
			if errHelper != nil {
				return nil, errHelper
			}
			return &assetFile{
				content: contentNew,
				name:    name,
				mtime:   info.ModTime(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := afs.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (afs *assetFiles) GetContent(name string) []byte {
	s, err := afs.GetAssetFile(name)
	if err != nil {
		return []byte("")
	}
	return s.Content()
}

// GetFileNames get all file names
func (afs *assetFiles) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, 0, len(afs.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range afs.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
func (afs *assetFiles) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	name = filepath.ToSlash(name)
	file, err := afs.GetAssetFile(name)
	return func(writer http.ResponseWriter, req *http.Request) {
		if err != nil {
			http.NotFound(writer, req)
			return
		}
		modifiedSince := req.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && file.ModTime().Before(t) {
				writer.Header().Del("Content-Type")
				writer.Header().Del("Content-Length")
				writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))
				writer.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(file.Name()))
		if mimeType != "" {
			writer.Header().Set("Content-Type", mimeType)
		}
		writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))

		gzipContent := file.ContentGzip()

		if len(gzipContent) > 0 && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			writer.Header().Set("Content-Encoding", "gzip")
			writer.Write(gzipContent)
		} else {
			writer.Write(file.Content())
		}
	}
}

// HTTPHandler handler http request
// eg:on file system is :/res/js/a.js and request is /res/js/a.js
// http.Handle("/res/",res.Asset.HttpHandler("/"))

// eg:on file system is :/res/js/a.js and request is /js/a.js
// http.Handle("/js/",res.Asset.HttpHandler("/res/"))
func (afs *assetFiles) HTTPHandler(baseDir string) http.Handler {
	return &_assetFileServer{sf: afs, pdir: baseDir}
}

type _assetFileServer struct {
	sf   *assetFiles
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assetFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(name).ServeHTTP(w, r)
}

func _assetGzipDecode(data []byte) []byte {
	gzipReader, errGzip := gzip.NewReader(bytes.NewBuffer(data))
	if errGzip != nil {
		panic("data in wrong format, gzip decode failed:" + errGzip.Error())
	}
	buf, errReader := ioutil.ReadAll(gzipReader)
	if errReader != nil {
		panic("data in wrong format, ioutil.ReadAll failed:" + errReader.Error())
	}
	return buf
}

var _ AssetFiles = &assetFiles{}

//---------------------------helper.go--------begin--------------------------//

func newAssetHelper() *assetHelper {
	helper := &assetHelper{}

	helper.Regs = make(map[string]*regexp.Regexp)
	helper.Regs["remove_above"] = regexp.MustCompile(`[\S\s]*?//\s*asset_remove_above\(\s*\)`)
	helper.Regs["remove"] = regexp.MustCompile(`//\s*asset_remove_start\(\s*\)[\S\s]*?//\s*asset_remove_end\(\s*\)`)
	helper.Regs["include"] = regexp.MustCompile(`//\s*asset_include\(([^)]+?)\)`)

	helper.RegisterFn("remove_above", helper.RemoveAbove)
	helper.RegisterFn("include", helper.Include)
	helper.RegisterFn("remove", helper.Remove)

	return helper
}

type assetHelperFn func(fileName string, content []byte) ([]byte, error)

type assetHelper struct {
	Fns  []map[string]assetHelperFn
	Regs map[string]*regexp.Regexp
}

func (h *assetHelper) RegisterFn(name string, fn assetHelperFn) {
	h.Fns = append(h.Fns, map[string]assetHelperFn{name: fn})
}

func (h *assetHelper) Execute(fileAbsPath string, content []byte, skipFnName string) (contentNew []byte, err error) {
	contentNew = make([]byte, len(content))
	copy(contentNew, content)

	for _, fnInfo := range h.Fns {
		for name, fn := range fnInfo {
			if name == skipFnName {
				continue
			}
			contentNew, err = fn(fileAbsPath, contentNew)
			if err != nil {
				return nil, fmt.Errorf("%s,current file is: %s", err.Error(), fileAbsPath)
			}
		}
	}

	return contentNew, nil
}

// RemoveAbove 删除在此标记之前的内容
// eg: \/\/ asset_remove_above()
func (h *assetHelper) RemoveAbove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove_above"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

// Remove remove 方法, 删除指定区间里的内容
// eg: \/\/asset_remove_start() 中间的内容被删除 \/\/ asset_remove_end()
func (h *assetHelper) Remove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

func (h *assetHelper) include(fileAPath string, content []byte, includeFiles map[string]map[string]bool) (contentNew []byte, err error) {

	fileAPath = filepath.Clean(fileAPath)
	includeFiles[fileAPath] = make(map[string]bool)

	contentNew = h.Regs["include"].ReplaceAllFunc(content, func(matchData []byte) []byte {
		idx := bytes.Index(matchData, []byte("("))
		name := bytes.TrimSpace(matchData[idx+1 : len(matchData)-1])
		if len(name) == 0 {
			err = fmt.Errorf("asset_include with empty param")
			return []byte(err.Error())
		}
		fileBPath := filepath.Join(filepath.Dir(fileAPath), string(name))

		if bFiles, hasB := includeFiles[fileBPath]; hasB {
			if _, hasA := bFiles[fileAPath]; hasA {
				err = fmt.Errorf("asset_include error: cyclic include,%s include(%s)", fileAPath, string(name))
				return []byte(err.Error())
			}
		}
		includeFiles[fileAPath][fileBPath] = true

		includeFiles[fileBPath] = make(map[string]bool)

		bContent, errRead := ioutil.ReadFile(fileBPath)
		if errRead != nil {
			err = errRead
			return []byte(err.Error())
		}

		b1Content, errB1 := h.Execute(fileBPath, bContent, "include")
		if errB1 != nil {
			err = errB1
			return []byte(err.Error())
		}

		cContent, errInclude := h.include(fileBPath, b1Content, includeFiles)
		if errInclude != nil {
			err = errInclude
			return []byte(err.Error())
		}
		return cContent
	})

	if err != nil {
		return nil, err
	}
	return contentNew, nil
}

// Include 将另外一个资源文件包含到当前文件里
// eg: \/\/ asset_include(a.tpl)
func (h *assetHelper) Include(fileAPath string, content []byte) (contentNew []byte, err error) {
	// 用于检查循环include
	includeFiles := make(map[string]map[string]bool)
	return h.include(fileAPath, content, includeFiles)
}

//---------------------------helper.go--------finish-------------------------//

// Asset export assets
var Asset AssetFiles

func init() {
	asset := &assetFiles{Files: map[string]*assetFile{}}
	Asset = asset

	{
		fileName := "/template/asset_tpl.go"
		contentGz := []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xff\xb4Z_\x8f\x1cE\x92\u007f\xae\xfa\x14\xe9\x126Uv\xb9\xda~mԇf<\xfew\xc2\u007f43\xdc=\xcc\xcc\r\xd9]Y\xdd\t\xd5Y\xe5\xccj\xcf\fMK<\x00\x06\x9d\xe1\x90\xee\x0et\xe8\xa4C\xb7\xec\n\x81`\x91\x96]\x01\xab\xddO\xe3\x1e\xf0\xb7XEdfUVO\xf7x\xbc+\xe6a\xba+32◑\x91\xf1\xaf\xda\xf7K:x\x83\x0e\x19\x99N_H\xcc\xf7\xd9\xcc\xf7;\x1dr\x93\t&i\xc5R\xd2?\"Â*Ū\x10\xc8\x1e2\xa9x!f\xb3(!\x1b\xf7\xc8\xdd{\xdb\xe4\xfa\xc6\xed\xed\x04\x16\x8d\xaa\xaaT\xddNgȫѤ\x9f\f\x8aqg\xc4\xd3IǬ\xef\xf8\xbe\xcf\xc7e!+\x12\xfa^\xd0?\xaa\x98\n|/\x18\x14\xe3R2\xa5:\xc37y\t\x03YN\x87\xf89\xae\xe0\x83\x17\x1d^L*\x9e\xc3Ø\x8f\x19|\nVu@\x1e|/\x90MI\xab\x91\xfd\xecd<gv@NDeV\xa9Jr1Dr;\x94\x17(K\xb2!;,\x03?\xf2q\xffk\x00\xf8\x06\xcf\x19)\x04#\b\x9f\x00O\xbf:*\x993\xcbE\xc5dF\a\x8cL}\xef.\x1d\xb30\"Z\x88\xef\xdd)\xd2m\x8e# +\x81\xef\xbew\xad\x10\x15\x13U\x18\x91\x9d=\xd0@=r\xf3M^6\xa3\xfa\x14h-\xa7A@\x80\xffdPi$\r\x85\x1e\x05\x18\x82\x8e\x191\u007f\x16\xcb\x18 \x981\a\xcd@\xcb\xc6a\x8bg\xd0\xe0q\xd0d\x131 !\xcd\xc8\xc5ZdDZ\x1b\x06ђU\x13)\b\xcd\x12\x00\xe1ϖ/[\xa2\x98\xf6bD\xbbR\xea\xa2\n\xdbk\r\xfcU\xb2\x97i{)\x03\xa0\x00\b\x0f\xa9$\xfbΉ\xf7ȅ\x9a\xddt\xd66\x16圓Z0\x15ն\x95\x9b\xac\xaa\xa7B<1\xadň\x84\xf5xL\x98\x94\x85\x8c\x90\xda\xee\xbaEk\xcf\xec\xa6^\x00\xe7\xa1\u0094K\x87\xc0X\x80\xef\x01\xc1-*Ҝ\xc9\x1b\x131h3\x82\xab\x948\xb3\xbewk{\xfb\xbe\x19\b\xfbT\xb1\r\x87\xabK\xbdh\xaaKt\xe0\xcc5V\xaa\x9fǴ\xdc\xd1\\\xf7\x9aS\xaaՎ#\x1b\\\xb2AE\xfaE\x91\x1b\x83\xe0\x82\xc3\xe9O}\x8f\x1d\xe2\x9eI\xb7G\xec\x8dO֩ba\xa1\x92\x9b\xacb\xe2a\x18\xec\aQ\xe4{\x9d\x0e)D~D\x98\xa0\xfd\x9c\x91\x03^\x8dȰ r\"|\x8fg\xc42\xea\xf5H0,\x02\xf2\xd6[$4~#\xb9y\xef\xde\x16N\x1cp\x91\x16\a* \x17.\x18U\xa8\x04\x8e\x85r\xa1@\xe2\x9a\x1c\xaa\x9d+{1\xb0\xb8ܟ\xf0<\r\"\x84\xe9\x81GK\u058b\"\xff\x17*\xc3\v\xee\xbeb\x12\xe0\xd3~\x8a\x8fAL2\x9a+\x16\x93 +$IY\u007f2\x8c%\xa3\xa9Ѫ\xa1\x8a|o\xd6\xd6ҵ\x834&\xfb\xa4G\xf4\xce\x0f\xd202\x8e\xbc\xb132\xb4>\xa4\u007fD\xf0\x82\xda+\xa2\x9c;\xa2\"\xf2<\xc6Y{\x1c\xe7\b\xb6\x8b\xad\x9c\xaa\x11.\x8dP\xbfHq\xaeG\x02T\x1e<\xed\\ك\x81\x17;/\xa2\x86\f\x8b\xa0\x13\x90K\x1a\x9b7Õ-#\x00\xca\x1a\xe8}Z\x8d\xba\xbdZ\xe8?\x17\\\x84\x8e2\x8cp/C\xa4`\"\x85J\xee\x95L\x84-\x0e@\x92\x17\xc3\xe4\xbe\xe4\xa2\xcaE\x18\xe0\x0e\x89=\x1d\xe0\xd2\vb\xf8\x88\xf5I\xc1\xa2^\x10\xb7\x98\xc4\x01\x93\xb2\x17\xc4L\xca\xc8\xf7=\xb4()a\u007f\x82\xe7\x88\xda:\x18\xc1s\xc4\xe3{\xb0?/e\x19\x93$K\xae\xe5\x85b!`\xe1\"+j\xc4Y\xb2U\xd1J\x8f\x9f\x95%\xcf\b\xf0H\xee\x14)\v\xa3\xe4\xb6\xdad\xc3IN\xa5\xbe1\x9e\xf5\xef\xb5\f\x1d[\x93MFӵ<\x0f3\x10\xb6L\xda\x12q\xde\f6\xeb\x8dX^2\xd9\xed\tv\x80ʻ\x85ψ\xdaJ\xbb\xcb\x0e@9\xb7\f\xa5^\x91\\?d\x83I\xc5\xda\a\x12[\x80A\xe0@\xd1+\xcf\xf5\x04\xcfO\xa0\xa9\xa75\xa4f\xd2\xf1Ը\xc6p\xee\x12\a\x15N\xc0\xf1v!\b\xe29\xe3\x10\xc6 \x18\xb3\xca\xd4!\v'g1\xc85\xfavՒ\x8d\xab\xe4:\\\x8b,\fD\xa1/\x9b\xbe\xac\xb0\r\x95\xc5dD\x15(\x9df*\xc1˶\x03\x12\xf7^\xc2\xf1i\xc3\rHQ\xc4\xcc?U\x00;\xe4\xaaRA\xe4۴\xcd\xc6\t\xbc\xeb6\xbc?\xfb\xba\x9f\x12]\x00\x96\xaa\xad\x05\x80\x9fp\x0f\xfa\x8e/\x18\x8c\x81\xad\x99\x84\x81Q\x83\xdd_RG\xf1\x06z\x1d\xc2\x10<\xcds\xed\xac@\x82:\x05\xfb\xe9\x91\x0f\xb0\xf0\f\x1c'\xfa\xf0\x00\xb1\xe1\x138\x1bĄ\x02`sc\xfa\x06\v\xed\u0098\\\x89I\x0e\xee\u009e\x15đ\x94\xcbMz\x00\xc4)\x97\xbea\x84\xfe\xe7ZΨ\x00\b\xe0\x01\x8c\xc4sڣ9\xf1\xe2\x16U[\x93,㇡\xe6\x14\x03AT\x83\xba\xd43\x94a\xed\u05f6XI%\xad0\x0f\x80\xfb\xa6E\x9e\xf0\xb5F0D\raB\xa2\xa4b\xc8\x1aSC!`\x86\r\x94\xfb\x92\x01\x14\xb4z\x00l\\\x84VH\x8fвd\"\xc5i\xd58\xd4Y\xcb*\xf1p\xf4\x11.d\x18d\xa4\xbfc\xba`\xf2\x81\x15\xa7\xf8\\\xb9\x899\xd1\x13\x11X\xef\"(%\u007fH+f\x94j`\"\x8f\xbbEu\xa3\x98\x88\xb4>\xf4SbVfC\xdciFo\x98æ\xc2\x03\xc9+\xb3\xd7d\x93\xa9\xb2\x10\x8a\xfd+\x8e\xc5D\xb2\a䢙y0a\xaa\x8a\xecY,:\xd9\x16N\xc3\x13\xd7G\x8d[3~g\\\xa4<\xe3,\xdd\xe2b\xa0\x8f\x9b=Hn1\x9a2\t`\xc3\xe0vv\xf9\x8e\xa1\xb9\x8cD\x81\x89#\xed\x95\xe7\xea[\xe15A\x01\x13\x9f\xfbT*\x16\"$p~7\n9\xa6U\xdc^\xeeF\x8b\x9e\xdeȅ\v\xa8\xd5\xc6g&\xeb,+$\vͶ=O\xefˀ\r\xa3d\x83\xe5a`\x1c\xc2\xe5\xed\xa3R#}\x06\xdd+L\f\xab\xd1\n\xca-P\xc0+TU\xb5\n \xb3j\xa3zu\xfbZ\x18%zW\x8b\xbb\x8cZl\xf1\x1c\ro$\x84\xa8<Qw\x8b\xcar\x8f\x9c\x98d\xa3\x10\x06G\xa8WaG\xe8^\xb0\xda9*\xd9\xfa\xd1\xf5Ê\t(\xa4\x9b{~\xfd\xb0\u0087DWU\x91=,\xcb\xc09\xa7\xa5\xbbm\xe9/\xaeי\x1b\xfbkh\xc8\xf7<(ٍ`\x9d\x8a%\xad\x02\xcb\xe4B\xe0E\x1d\xca蟮,M\xa1\x17\rxm0`eu\xf9\xba\x18\x14)\x17\xc3 \x82\xcc\xfaM^\x9a\xab}\xba\x1a\xeaU\xf5\"\u007f\xe1@[\x90@K\x84劵Xk:w_aT\xbb@\xed\xf4\x9c:\xa9\xed\xf0\xa4\xbe\xea@Æ\xddB\xe8`\xa6\x8eT\xc5Ƅ+\xd2\xedH\xa6:\xaf\xab\x0eM^W\x84\x8aԮ\x80IwζV\x8c\x0f\f\x03\x9c\fb\xc9T\x82.)\xb9UU\xa5\xad\xd5 \x9c\xe8\xd4\xff\uf43aR\xe2\xeb\xa7\tD8Q\xb4ʹ\x9f\xb5\x92t\xcapS\"\x01\x83-&\x1f29UY\x17\xdcpLʔ\xcb.1|\xf0\x10\xb0\xc6\\\\\xe0T\x9a*#\xc4E\xe4{e\x93(\x98S\xc4E\x00\xb4\xf9f\xb6\x93\x91\x8b\x8b\xbc\xa3\x86(<X\xe1\xf1\x97\xf8{\xb1X\xa9ڐ\xd3.a\xb2\x04\xe0\xc5D&\xafn\xbe\x92`\x89\x02\xf1(QY\xb2,L\x82\xd9\xd7`b\"\xa3\xbao\xa2a\xc3E\xdc`\x03(\x06RZQ\x93\x8f\xb9\xc9\x1d\\\x83M\xbcC\xe8\xfe\xb1\xf1\xd3\xed\x11\x18N\xee\xb2\x03=\x15b\xbb\x0e\x9e\xd7'Y\xc6$2\x8b\xea\xc4\x0f\x179\x81\xac\xa4\x82\x0f\xc2\x00%rA\x0ed!\x86$3\x01\x048\x93\x141\x91\x8c\xf2\x9c\xa5]\xa8\xfa\f\x1b\x9d\xdf\xe2=\x9b\xf9^\u007f\xa2\xeb7\x8dbI\xbdҠ\xaf\xc1\x18ڳ\xc2i3\\@\xa4y\xb51\x19#\xedO2\xd0\xf5b\x87H\xb5ZDJ\xf7\x88.\xaf\xfe3\xb5а\xb0\x03}6\xe4b5}\xa7\xe3\xc3\x1f\x1e\xf1b\xc5e\xcc\\?\xc2\xce5sP\xdb\x05g\x060\x99\xa9d\x93\r\x011\xa6\xben7F7Da\x9a\x1d\x96Q\x8b|'\x90l\\<d\xfb\xb4_<d\xc1\x1e\x81\xdc\x03\xa9\xefLTu\xad\x18\x97\x90#\xbd\xb6\xb3\xbb\xb5\xab\xf6.\xbe\xdc\xe9\xec*\x8dk\xdf]\xb7\x1b\uea8b\xbb\xd1k\xcby\xaf\xe4z\x92\x9b\xaa\xa8\xac\f\xb7\xd52\x99HWI\xe4b\x90O\xd23\x894\xa4\xbba\xb8\xf3o\xd1ޥ\x97#d\xe7\xf2\xe3\xaab\xf2\x86\b\xdb:\x8aIM\x01\xa3k0\x18-]f\xc1\xd4+n\xeb\x81\xe5\xd4FY\v\xec\x01\x91M|ualݤc\x047L⚙\xf2\x89ز\xc7V\x8d\xd6S\x84\xfaKݍ<\xc1\xc9\xed\xea\tE\xc8ΞcH-\x89\xbe\x87\xe6\xb6\xd2Κ\x9e\xef\xa8e\xca\x11q6-\\\xb0\x99h\xef\t=\xed(\x01\x1cu\xfd\x82\x8f1Y\x05j\xaa\xab\xffL̢\xd5\xf2m\xab\x02\xb4\xb5\xd6W\xe0\x96W(,&\xea\r^\xde\x10w[}\xb3\xa6\xe3@\x1cu:=4\x87\xa0.D5\x1ddOf\x16\x1cР(\x8f\x1cv\xb5x[\xfd\xed\x83Rn\x8b\xachJ@\xad\x0flD\x9a\xf2\x10\x15W\xcf\x1b\xfa\xa9\xc9\xe5\x85\xe9\x84:\xfbh\xfa'\\LX\xddgqa`\x05@2\xe1\xaa(v:-g\xea+\xb9\xfd\x8d\xf3*\x1eL\xa4\x04\xcdb\x12\xc3U\x97\x9cW\x01J\xb2\x0eY\xa7\xacFZ\xd4dޘ|\x1b\xc6.H\xc1s\x13\xf1\x9d\x8bH\xe6\xef\u007f\xfe\xf4\u007f\xbe\x98\xff\xef\x97\xc7\xdf|q\xfc\xf9\xa3_\xbe\xfd\xeeɏ\xff>\xff\xe0ß?{g\xfe\u07bb\xf3o\u007f4\xe9\x14\xd9\xed\xec\x9aVw˕\x85\xd1J\xab\xad\x85\x9c\xc1r\x9e\xdbLFK\xddq\xb2\xc9ʜ\x0e\x18DǺ\xd9״a\xa23)\x86h\x9e\xe4\xf8\x93\x1f\x8f\xff\xf0߱Q\xd1\xf1\xe3G\xf3o?\x9b?\xfe\xe9\xe9\xa7\xdf?}\xf4x\xa9~N\xfa\xe60\"O~\xf8\xe6\xe9\xa7\xdf\xd7\xf4\xbf\xfc\xffך\xe1\x12\x8d\u008d=]\x9f\xbf\xbe*\xff1%.\xc7n\x1c\xbb\x06\u007f\xaa\xff0\x94'ސ8_\xfbE\x91\x9fa\x8f\xba\x8f\xa1\xa59\x89\xa7nU\xd5S\x9089\"wꉽ%\x89\x01J\xf6Wh\xaf\x8e\xa4\x8e\xfa0S\xadU\x88!gL\xab\xc1hcy6\xea\xf1\xf4\x10<\x93\xce7o\x8b\x94\x1d6\xf4\xcd\x11\x84x\x06uN\xad\xa9\xb7%\x1fo\x95t\xc0\x9a\x15;<=\xbct\x95tы֣\xd1\xe5\xab{QS\x9bb\x1e\r\x1e\xef\x8avIƕ9\xbe\xa8\x15\xfd\xf5\xdb#6.\xab#RRIǁӝ\xb1\b\x1d'eKp\xd0\xeb:\x9e\x85[\x05\xe8\xa4\xdf>mp\xe9\x1cLl\xbb\x81\x88Ж\xd3}<&\xec%\xafcF\xbcxx(D7\x95\xd7k\xaf\xbe\x8f\v\xd6P[\x8b\xe7\xfc\x92\x9e\xd2\xfe\xf8Y\xbbG\xeb\xea\x92\xc1\xd1 \xe7\x03+<>\xafj\v?\xaf\"\xd3KX\xd3A\xa0\xbd\t\xefY\xba\xb2>|\x95U:{$=R\xc9\t\xf3\x97\x11\xaf?˄\xbd\xfe5\xe7]\bd\xfa\v\xf5\x05\xf6\xfajV\xcd[\x18$uc\x98V\x99\x999\x83-\x80쫮\xf0\xf5\xab z\x94\xb8iƺV^\x03\xb2\xbe^\r\x92\xf5\xab\xcbq\xac_=\x1b\x8a\x81\v\xc2d\x9a\x1a\x89\xeb\xae,\x92\x06\xb2\xab\xec\x06\x8de\xb0\x14\x92\x99<\xd3M\xb1\xbe\xd5\xc8\xf3\xbd\x99i\xaa/\u007f\xc7м\x92\x9a=#\xb8Y\x84\xf3\xefޛ\xff\xc7\xef\xe6_|\xf2䇷\x9f\xfc\xf0\xd5/\u007f|\xe7\xf8\xa7\x8f\x8f?y\xf4\xe4\xcf\u007f\x9a?~w\xfe\xf1\xd7\xf3\xf7\xbf\x9b\xff\xe5?\xe7\x1f|\xa8\a\x9f>z\xbc$\a\xb0:\xa2IU\xe6\xabb\xd6\xed3\xfa\xfd\xb3\x84\xacN\x87\xfc\xfc__>\xf9\xe9\xa3\xe3\u07fc}\xfc\u007f\xbf\x9d\xff\xf5\xab\x9f?\xfa=\xb7\x8amō\xeeI\xbb?q\x05\xea\"!9\x11\x9cjt\x8bg\xfd\xdc\xe5l\xc6\x05W\xa3S\xcbY\xfb\x1b\n\xc2\x0e\xf1\xe7A\xa8?\x85\x85\xb5\x1eo\x8ak\xbf\xf5\x1b\x80\xa9\xaf_\aw\xdb%7\xfe\xef.\xffq\xc1t6\xf3=\xe4\xd7\xc31ߛNu\x16\xfc\x02f\x99\xdd\x1eI\xf0]\x05\xd0M}\x8f\x10Bl\x89\xd4\xedM\xa7/\xd4=ڷJ\xc9E\x95\x91\xe0\xfc\x83\x00\x88\x9b_\xcet{ƴ-\xb9\xb1\xe3\xf6\n0\xf6B\xa0^\xbb\xbd\x85W\x95X\x92X\xb1\xf8\xceQ\xbf\x8fľ\xfc\xab\x82\x1f֬\xef\xc0\xd0l\x16_ѯ&\xed+\xce\x13͟\x1a\\\x8b\x0e\b\xba\xf5\xf7\xd8\\?\\\x9b4\x9e\x14@\xec\xf5\fV\xbcd\xd3)\x13\xe9l\xe6\xcf\xfc\xbf\x01\x00\x00\xff\xff\x01\x00\x00\xff\xff\xa2\th\nF&\x00\x00")
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570593982, 0),
			content:     _assetGzipDecode(contentGz),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		fileName := "/template/demo_config.json"
		contentGz := []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xff\xaa\xe6RPP*.JV\xb2R*J-\xce/-JN\xd5W\xd2\x01\t\xa6\xa4\x16\x97 \x8b&\x16\x17\xa7\x96\xe8\xa5\xe7Cd\v\x12\x93\xb3\x13\xd3S\x91\x14(q\xd5\x02\x00\x00\x00\xff\xff\x01\x00\x00\xff\xffdJg\x11M\x00\x00\x00")
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570420205, 0),
			content:     _assetGzipDecode(contentGz),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		fileName := "/template/footer.tpl"
		contentGz := []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xffT\x90\xc1J\xc4@\f\x86ϓ\xa7\b\x8bJ+K\xf1<0\aQܓ\xde<\x95\"\xb5\x9b.\x03۴vFЍ\xf3\xee\x92q[\xd9KH\xf2\u007fI\xfe\x19\xe8?\xb9C\xcf>\x16\xa5\x80iC\xa0h\x1d\xde\xe4\xe4\xc9\x1f)H\x8e\x16\x87v\xaaC\x9c=\x1f\x9a\xdbU\x95\x94\xc0\xdck\xe5r\x0f\x8c\xc8\xdc\xf2\x81\xf0\xaa\xf7GB\xeb\xb0\xd2$('`\x10\x11\xb5~i\a\xb2N$S\x95V?\xd3\xec9\xf6\xb8\xb9\xfe\xd8(l\xba\x91#qܝ\xac\xab\x9b\xf7\xefHł?\xfc)\x97\x13%\x1832\xa9)\xeb\xfe\xed\v\x18cX\xaf-g\xb7\xda\x19\xa2\x1f\xc8j\xa8^\xd9\u007f\xad\xab\x9f\xb5\x95\xd2\xf6\xae\xcc\xd8ك}\xcb\xfbv'?=R7\xee\xa9X\xcd]p\n\xd85WE\x1f\x92g\xab\xfc\x8b\xf5b\xa2qg\xaf\xa0\x88\b\xf1>%H\xf0\v\x00\x00\xff\xff\x01\x00\x00\xff\xff\x91\x85\x94L\x8f\x01\x00\x00")
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570590208, 0),
			content:     _assetGzipDecode(contentGz),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		fileName := "/template/header.tpl"
		contentGz := []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xff*HL\xceNLOU\xa8\xaeVу\xb2kk\xb9\xb8\xf4\xf5\x15\xdcS\xf3R\x8b\x12KRS\x14\x92*\x15\xd2\xf3\x13\x8b\x8bSK4@\xca\xcaR\x8b\x8a3\xf3\xf3jk5\xf5\x14\\\xfc\x15\xfc\xfcC\x14\\]<C\xf4@\x9a2JJ\n\x8a\xad\xf4\xf5\xd33K2J\x93\xf4\x92\xf3s\xf532SJ\xf5\xa1\xfa\xf5\xb9\x00\x00\x00\x00\xff\xff\x01\x00\x00\xff\xffU\xf6\xa9qp\x00\x00\x00")
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570591452, 0),
			content:     _assetGzipDecode(contentGz),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		fileName := "/template/helper.go"
		contentGz := []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xff\xb4W_k\x1b\xc7\x17}\xd6~\x8a\xfb\x13\xf8ǎ\xb3\x95\xaaW\x05\x11,'\xa2.\xd4\x14\xa7o\x92\xea\xacV#k\xc8j\xb4̎b\x19#\xc8C\x12'\xd4I\x03m\x1d\x1a\n\r\xad[BB\\C\xd3b\xbb\xb4\x9fF+\xdbߢ̟]\x8d\xac\x95\xadR\xfad\xed̝{Ϝ{\xe6\xccزZ=\xea\x01śKa\x88\xf9G\xd8\x0f0\xb3\x11,\xba\xe3Oض2m\xf5\xabX\x82\xff\x1b3\xdb\x03+\x9eʭ\xe1\x8d\x10J\xd0q\xefb\xbb\xe3\x06Ր3B7\xea\x8b\fo\xe0~ \xa6q?@\x13\xe1\xd5,Ý\xee=\xbc\xee6\xba\xf7p\xb6\x0e%\xd0џ\xf4B\xbe\xdc\xed\x04\xc4\xc7\xf6\x9dj\xedv-\xac/\xde\xc8\xe7k\xa1µn\xae\xabٵp\xb1\x86\xee\xa4瞙u:[\xc8]\xc6u\xb6\xd951mΪH\xa8\xe7\xf7\x9as\x95ԡ5ۮ~\x8e\xea\xd7n \x99\xce\xccGB\x8eY\x85ړ\x1c9\x90D\x88\xd1%1\x88R\x97\xc5`\x92\x15+j =Z\x93u!\xbd@\xc40\xef1\xaaǭ\x81e\xf1\xad\x00\x83!\x82\n\x05\xa1!\xbbE|\xbc\xeav0\xa8\xce;\xe0u)ǔC\xb5\xde\xd8\xe2\x18\x81\xad~8\x80\x19\xeb24\x9dI\xac\xecy\\\xe8\xadBC\x80j\xdd\x10\xd2DE+#\xe56Sg\x02\xa7\x14\xb6ݞ\x902\x02c\xd3\xd4\x04ۢ\x93{BR\xf59\x81\xa3\x04n\x10`ڴ\xe5\xa7\x03\xb3@m\x8b\x84Eh\xd1\x01\x9a]\xffV\x1f{=\x8e%[K\x8d\xf0S\x97\xb7g\x10\xe6@x\x97\x04\x15jp\x8a\xc0\xd61\xabx\x13\f:5\xa5\x02\xb3\x11\xa0Oc\x1c\xe7c\x1a/GH\x04\x06[F\xba\xa4\xbchz\xab\xcb`]\x90\xb2B[]q\xea\x99K70(>\xb6\xad\x8c\f\x10ە\xc4%\xf3:^\x04dHK\x06@\xa9d\xeeCNI\x8c\x84\xf6\xb0\xf8\x18Xz \x86!\xb6S\x82\x165)J\xc0\xad\xe2M\xa4\xb3\x8b\xb8\xff\x95\x80\x12_g\xd5J\xa5\xc4w\xa0\xd5\xe1\xb9[\x82\x93\x96\x9d]\b\x1d\xafǘ`V\xa4\x04\x12\x16a!\xcc\xcaJ*\xc8F\x0e\x18\xd5P\x8ck`e\x06\xe3#`\x82\xa4\xc4\x17=\xce\xe7\xc18\x88\x10=~u\xfe\xed~\xf4\xdd\xebѻ\xfdѫ\x9d\xb3\x83\xc3\xe1\xf1\x17ѓ\xa7\xa7/\x1fD\x8f\x1eF\a\xc7b\x01\xde(B-_\xcbô\x95\xd9h\xa6j\x93\"s(\xe7\x1fˤ\x9djǹ5\x1c\xf8\xae\x87\x97|?\xce\xe7\xe8lv6+$4\a1\xa0r\xc2h\xefx\xf4\xeb7\x8e\xa6h\xb4\xbb\x13\x1d\xbc\x8cvO\xce_\xbc?\xdf\xd9M\xe5gڛm\x04ãw\xe7/\xde'\xf1g?\xbcU\tS\x18\x15'\xf6r>\xff{*\xff\x1d\x89\xe9ص\xb1+\xf0\x97\xfa\x87\x8e\xac\x10\x1fOx\xa5\xf1\xb3\xd1\xed\xfas\xec\xd1ʌ\xab\x95\xe4Q\t\\\xde\xce-\xfbإc \xc8ʘ%\xab\xc9D=\xe5a +[3\xd8KnR\x83\xbe\x8a\xb8d\x12\n\xe5\x95\xd3q\xb9\u05fe\xe9r7\xe9\x96\xfa+\r\x814\xfb\u0099\xc4w\x98[\xa1M\xdc\x1fǏ[`\xcb\x1ed\xa4U%џ1ҹ\x1d\xb8\x1e\x1e\xaf\xa8\x92f\xffZ\x01\x8a\xd2E\x93Q\xf4A\xa1.\x96\x93\x96\x1c\x17Y\x90p\xbc\x0f\x95%i+3\xbch\xe2\xf6\x87M\xc2ۀ;\x01߂\xc0en'+\x9dG\vB#4L\n)K\x92\xbd(\xcb^\x14\x8df|\xdc%\xaa\x17\xf2\xeb&aFc\x1c\xad\x11\x85P\xd0. 7d\x9b\x1ch\xbbaY\xa4\x9aj\x9e,R\xbf\xae\x02bW_\x97\v\x96$[\x17\xfb|]M)?\xbej\xf7R]E\xf0\xb6<\x9fxqqg!L\x14\xbe\x10\xa2\xac6fu\tLn\"s\x15W\xb1\x87\xcfR\xa5\xb1G(\x01g=l\xa5\x05\x97\xaf\x92p\xa6\xb1\x1c\xcb\x123\xb6\x86ݦd\xb3\xdb\xe3\xc4ωO\x91\xcbNRi\xc1ġ\xe6\x1d\xa6(\xd33shA\xd4.\x98\xc5\xcb\x05Q\xba\x9d3\x9f\x19eE\xde\x18dr\xbc\xc6Hʅt\x1c\xe5\xc2|(<\x13\x84~i*$\xa6]\xc5HƐM\xb2\xc7h\xe2\x04\xa9\x90\xf4\xe4\\'%\xf6V]\xcf\xca\fD\xbf\xa6\x1f\x0f\xe6\xd3\x013&\xae\xfd\xcb/\xb7\x18at\xf8(\xfa\xf2\xe7h\u007foxt\u007fx\xf4\xe6\xec\xb7\a\xa3\x93磽\x9d\xe1\x1f\xbfG\xbb\x0f\xa3\xe7o\xa3Ǉџ_EO\x9e\xaa\xc1\xf3\x9dݔ7@̑\x9b\xe3\x81?\xeb\xceZ\x99\xd3\xf7繲\xf2y8\xfd\xfa\xf5\xf0\xe4\xd9\xe8\xc7\xfb\xa3\xef\u007f\x8a\xfezs\xfa\xec\x17\x12\x13;qo\x14\xa7u?u\x04\x92\u007f\x12rS\x97S\x82\xeeb\xaf\a\xd6\xdf\x00\x00\x00\xff\xff\x01\x00\x00\xff\xffX\xf3\x1ew|\x0e\x00\x00")
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570594690, 0),
			content:     _assetGzipDecode(contentGz),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		fileName := "/template/helper_test.go"
		contentGz := []byte("\x1f\x8b\b\x00\x00\x00\x00\x00\x00\xff<\x90\xcdj\xeb0\x10\x85\xd73O1W\x10\x90A(\xfb@\x16\xe1\x12h\xa0\xabnK\xa1\xfe\x19٦\x89\xe4J\x93إ\xf8\u074bd\xda\xed9\x9f\xce'\x06\xeb\x94X\xf0\xdd \x00\x9c\x97\x89[9\x90*\xa1\xca\xd9j\x10VD\x18\xf8:q\xa4Ñ<ϧ\\?\x95DW\x88\xe0B\xa4\xb1[\f\xb5u\xe2\x8b\xf0-s\xb1\xf6=\x97$\xd17\x02\x88}\x0e\xbd\xd3ʇ\x99\xe2ݗF\xef\xbaJ\x99\xfc\xb6B\x80\xc6\x19\xe2X$\x9bξ\xf0-<\xf8Ԅ\ake\xed^8IWK\xbdo\xac,\xa2\f\xbd\xbe5_\xc2\xfa\xd7k/~\xbaK\x95\xc7FW\xb6\xfe\x1dɏ\xd7\xf2\x01\x10{\x8e1D\xa7U\xe6i\x1ee\xc8L\x88\a\xda%U\xdc\x1b\xa1\xcb\u008a\x00\u007f\xc3\xff\an?\xb6\xfb\x9c?\xb5\x18J\x12G\xdf\xeb\xc6ev\xc5\x15\u007f\x00\x00\x00\xff\xff\x01\x00\x00\xff\xff\xc0\x12\xdf\xf1J\x01\x00\x00")
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570594588, 0),
			content:     _assetGzipDecode(contentGz),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

}
