package internal

// Generated by goasset(1.0 20191102). DO NOT EDIT.
// https://github.com/hidu/goasset/

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"log"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"regexp"
	"runtime"
	"strings"
	"time"
)

// AssetFile one asset file
type AssetFile interface {
	Name() string
	ModTime() time.Time
	Content() []byte
	ContentGzip() []byte
}

// assetFile asset file  struct
type assetFile struct {
	name        string
	mtime       time.Time
	content     []byte
	contentGzip []byte
}

func (af *assetFile) Name() string {
	return af.name
}
func (af *assetFile) ModTime() time.Time {
	return af.mtime
}

func (af *assetFile) Content() []byte {
	return af.content
}
func (af *assetFile) ContentGzip() []byte {
	return af.contentGzip
}

var _ AssetFile = &assetFile{}

// AssetFiles asset files
type AssetFiles interface {
	GetAssetFile(name string) (AssetFile, error)
	GetContent(name string) []byte
	GetFileNames(dir string) []string

	FileHandlerFunc(name string) http.HandlerFunc
	HTTPHandler(baseDir string) http.Handler
}

// assetFiles asset files
type assetFiles struct {
	Files map[string]*assetFile
}

var _assetDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	// only enable with go run
	if exeName == "go" || (runtime.GOOS == "windows" && strings.Contains(os.Args[0], "go-build")) {
		flag.BoolVar(&_assetDirect, "asset_direct", false, "for debug,read asset direct")
	}
}

var _assetCwd, _ = os.Getwd()

// GetAssetFile get file by name
func (afs *assetFiles) GetAssetFile(name string) (AssetFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assetDirect {
		assetFilePath := filepath.Join(_assetCwd, name)
		f, err := os.Open(assetFilePath)
		log.Println("[goasset] Asset Direct, name=", name, "assetPath=", assetFilePath, "err=", err)

		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}

			helper := newAssetHelper()
			contentNew, errHelper := helper.Execute(assetFilePath, content, "")
			if errHelper != nil {
				return nil, errHelper
			}
			return &assetFile{
				content: contentNew,
				name:    name,
				mtime:   info.ModTime(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := afs.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (afs *assetFiles) GetContent(name string) []byte {
	s, err := afs.GetAssetFile(name)
	if err != nil {
		return []byte("")
	}
	return s.Content()
}

// GetFileNames get all file names
func (afs *assetFiles) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, 0, len(afs.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range afs.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
// 若目录名称 为 *private 则不允许通过web访问
func (afs *assetFiles) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private/") {
		return http.NotFound
	}
	return afs.FileHandlerFuncAll(name)
}

// FileHandlerFuncAll handler http files
// 无 private 目录规则
func (afs *assetFiles) FileHandlerFuncAll(name string) http.HandlerFunc {
	name = filepath.ToSlash(name)
	file, err := afs.GetAssetFile(name)
	return func(writer http.ResponseWriter, req *http.Request) {
		if err != nil {
			http.NotFound(writer, req)
			return
		}
		modifiedSince := req.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && file.ModTime().Before(t) {
				writer.Header().Del("Content-Type")
				writer.Header().Del("Content-Length")
				writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))
				writer.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(file.Name()))
		if mimeType != "" {
			writer.Header().Set("Content-Type", mimeType)
		}
		writer.Header().Set("Last-Modified", file.ModTime().UTC().Format(http.TimeFormat))

		gzipContent := file.ContentGzip()

		if len(gzipContent) > 0 && strings.Contains(req.Header.Get("Accept-Encoding"), "gzip") {
			writer.Header().Set("Content-Encoding", "gzip")
			writer.Write(gzipContent)
		} else {
			writer.Write(file.Content())
		}
	}
}

// HTTPHandler handler http request
// eg:on file system is :/res/js/a.js and request is /res/js/a.js
// http.Handle("/res/",res.Asset.HttpHandler("/"))

// eg:on file system is :/res/js/a.js and request is /js/a.js
// http.Handle("/js/",res.Asset.HttpHandler("/res/"))
func (afs *assetFiles) HTTPHandler(baseDir string) http.Handler {
	return &_assetFileServer{sf: afs, pdir: baseDir}
}

type _assetFileServer struct {
	sf   *assetFiles
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assetFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	name := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(name).ServeHTTP(w, r)
}

var _ AssetFiles = &assetFiles{}

//---------------------------helper.go--------begin--------------------------//

func newAssetHelper() *assetHelper {
	helper := &assetHelper{}

	helper.Regs = make(map[string]*regexp.Regexp)
	helper.Regs["remove_above"] = regexp.MustCompile(`[\S\s]*?//\s*asset_remove_above\(\s*\)`)
	helper.Regs["remove"] = regexp.MustCompile(`//\s*asset_remove_start\(\s*\)[\S\s]*?//\s*asset_remove_end\(\s*\)`)
	helper.Regs["include"] = regexp.MustCompile(`//\s*asset_include\(([^)]+?)\)`)

	helper.RegisterFn("remove_above", helper.RemoveAbove)
	helper.RegisterFn("include", helper.Include)
	helper.RegisterFn("remove", helper.Remove)

	return helper
}

type assetHelperFn func(fileName string, content []byte) ([]byte, error)

type assetHelper struct {
	Fns  []map[string]assetHelperFn
	Regs map[string]*regexp.Regexp
}

// RegisterFn 注册helper方法
func (h *assetHelper) RegisterFn(name string, fn assetHelperFn) {
	h.Fns = append(h.Fns, map[string]assetHelperFn{name: fn})
}

// Execute 执行所有的helper方法
func (h *assetHelper) Execute(fileAbsPath string, content []byte, skipFnName string) (contentNew []byte, err error) {
	contentNew = make([]byte, len(content))
	copy(contentNew, content)

	for _, fnInfo := range h.Fns {
		for name, fn := range fnInfo {
			if name == skipFnName {
				continue
			}
			contentNew, err = fn(fileAbsPath, contentNew)
			if err != nil {
				return nil, fmt.Errorf("%s,current file is: %s", err.Error(), fileAbsPath)
			}
		}
	}

	return contentNew, nil
}

// RemoveAbove 删除在此标记之前的内容
// eg: \/\/ asset_remove_above()
func (h *assetHelper) RemoveAbove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove_above"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

// Remove remove 方法, 删除指定区间里的内容
// eg: \/\/asset_remove_start() 中间的内容被删除 \/\/ asset_remove_end()
func (h *assetHelper) Remove(fileAbsPath string, content []byte) (contentNew []byte, err error) {
	contentNew = h.Regs["remove"].ReplaceAll(content, []byte(""))
	return contentNew, nil
}

func (h *assetHelper) include(fileAPath string, content []byte, includeFiles map[string]map[string]bool) (contentNew []byte, err error) {

	fileAPath = filepath.Clean(fileAPath)
	includeFiles[fileAPath] = make(map[string]bool)

	contentNew = h.Regs["include"].ReplaceAllFunc(content, func(matchData []byte) []byte {
		idx := bytes.Index(matchData, []byte("("))
		name := bytes.TrimSpace(matchData[idx+1 : len(matchData)-1])
		if len(name) == 0 {
			err = fmt.Errorf("asset_include with empty param")
			return []byte(err.Error())
		}
		fileBPath := filepath.Join(filepath.Dir(fileAPath), string(name))

		if bFiles, hasB := includeFiles[fileBPath]; hasB {
			if _, hasA := bFiles[fileAPath]; hasA {
				err = fmt.Errorf("asset_include error: cyclic include,%s include(%s)", fileAPath, string(name))
				return []byte(err.Error())
			}
		}
		includeFiles[fileAPath][fileBPath] = true

		includeFiles[fileBPath] = make(map[string]bool)

		bContent, errRead := ioutil.ReadFile(fileBPath)
		if errRead != nil {
			err = errRead
			return []byte(err.Error())
		}

		b1Content, errB1 := h.Execute(fileBPath, bContent, "include")
		if errB1 != nil {
			err = errB1
			return []byte(err.Error())
		}

		cContent, errInclude := h.include(fileBPath, b1Content, includeFiles)
		if errInclude != nil {
			err = errInclude
			return []byte(err.Error())
		}
		return cContent
	})

	if err != nil {
		return nil, err
	}
	return contentNew, nil
}

// Include 将另外一个资源文件包含到当前文件里
// eg: \/\/ asset_include(a.tpl)
func (h *assetHelper) Include(fileAPath string, content []byte) (contentNew []byte, err error) {
	// 用于检查循环include
	includeFiles := make(map[string]map[string]bool)
	return h.include(fileAPath, content, includeFiles)
}

//---------------------------helper.go--------finish-------------------------//

// Asset export assets
var Asset AssetFiles

func init() {

	var _assetGzipDecode = func(data []byte, fileName string) []byte {
		gzipReader, errGzip := gzip.NewReader(bytes.NewBuffer(data))
		if errGzip != nil {
			panic(fmt.Sprintf("[goasset](%s) gzip decode failed,err=%s", fileName, errGzip.Error()))
		}
		defer gzipReader.Close()
		buf, errReader := ioutil.ReadAll(gzipReader)
		if errReader != nil {
			panic(fmt.Sprintf("[goasset](%s) read decode content failed,err=%s", fileName, errReader.Error()))
		}
		return buf
	}

	var _assetBase64Decode = func(txt string, fileName string) []byte {
		txt = strings.ReplaceAll(txt, "\n", "")
		bf, err := base64.StdEncoding.DecodeString(txt)
		if err != nil {
			panic(fmt.Sprintf("[goasset](%s) base64 decode failed,err=%s", fileName, err.Error()))
		}
		return bf
	}

	asset := &assetFiles{Files: map[string]*assetFile{}}
	Asset = asset

	{
		// 0 mtime: 2019-11-02 19:19:36 , size: 5906
		fileName := "/template/asset_tpl.go"
		contentBase64 := `
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`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572693576, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 1 mtime: 2019-10-07 11:50:05 , size: 77
		fileName := "/template/demo_config.json"
		contentBase64 := `
H4sIAAAAAAAA/6rmUlBQKi5KVrJSKkotzi8tSk7VV9IBCaakFpcgiyYWF6eW6KXnQ2QLEpOzE9NTkRQocdUCAAAA//8BAAD//2RKZxFNAAAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570420205, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 2 mtime: 2019-11-02 18:52:14 , size: 580
		fileName := "/template/footer.tpl"
		contentBase64 := `
H4sIAAAAAAAA/5RUwW7bOhA8k1+xT0gepEJQiqLoQQAPSZrm1Bxi9OQaCW0tDQIy5ZJ061rhvxdLSnLcokFzEcTl7OzsjGyudmYF2mifFz3nAACcf5cWHqRz
6G8PevsRV12DIICgeSO9hPli+dNjCUq3eCc3CM5bbdbFcAE9Z+uD3t6jbNCWgNYSEdQCqFzd4Y90lRPa0flqpxTayF4UnGk1Nf0nwOiWKNlWGr3K1cZXs63V
xqs8m6+7KHSRn7siskOT9CqpW2xKtFacu+yodZJT3Vjb2bygeYGzBhVaOMqurtvOYV5wttyp2JTqtIXudl63FRUu2zY/Nk3SB+xrxFuUzSh+1RmPxr+8xKDz
dA2LfmcNLHeKh+dJXkmHH96fZun3fkjuxSgJJoa6q+5x28oV0t5+70vIvpqshCwjo5JP5NAyjqtmvrkxq67RZl2l2bNIQ62TV69yKRH/U8h/cSYaw1nkrAX8
H18+6RZdH581bOR2ntZdvJlu+xA4u6STiDXOWd9badYIZ7rZl2c0m1av6MURuueMflAXF9D3hAkBNl5vsKYzoarPdHzy7p3zNgQowenDs+uZPiAREcu4Wi3G
Wzo9JZcgO/+Wjcjh40mJ1+JxxF+n+lPbmfWD3/sHtfEhPHLO2NBye6jFn59LfkJYjkIKzlhnkLypxdFFSpEZEjqFQZW0OD2qL0bv8xMHQijfFhE2jKp///vJ
J4XH+c8bCFkfMZxR4injKqY6H9sWYhAdP4q+R9OEwAP/BQAA//8BAAD//3L0j88KBQAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572691934, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 3 mtime: 2019-11-02 18:17:10 , size: 869
		fileName := "/template/footer_fn.go"
		contentBase64 := `
H4sIAAAAAAAA/5SRQWvjMBCFz/avmDUEZDA6LXtY8GGzDb3lkBzTUGRrZASKbEbjNk3Jfy+yXac5NDRHjWbefPNemr4ogmcVAvLjyXYPWLcaoQTT+1poxQp2
++qNsQBjHa7VASEwWd/k0we8p0lzst0GlUYqAImiEPwtIZblGl/HLxG7Q3wve2OQBvU8TxNr5qFfJXjromTSKW9rYQ4stx1Zz0Zku6YdQPdiEfJBHfTIa5R1
qAskKhchu7DOOHJF1JLI475zmmg0SHDBlv9dG1DkaVL1Zhga6/EK2/ZsnYyFf86Jy9CMPvXeA0+o9Cd83XpGz7ePmDivzyDknjxUvUnPX5NcqoB/fl9nyUee
krsZZWwrp3qQG+ycqjHezUcuIHvyWQFZFo0afYoOVcM6uWW98nWrrW/kuHs7yMTR2au7XBqFfxTyN85EYz4AAAD//wEAAP//q/NnTeQCAAA=`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572689830, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 4 mtime: 2019-10-09 11:24:12 , size: 112
		fileName := "/template/header.tpl"
		contentBase64 := `
H4sIAAAAAAAA/ypITM5OTE9VqK5W0YOya2u5uPT1FdxT81KLEktSUxSSKhXS8xOLi1NLNEDKylKLijPz82prNfUUXPwV/PxDFFxdPEP0QJoySkoKiq309dMz
SzJKk/SS83P1MzJTSvWh+vW5AAAAAP//AQAA//9V9qlxcAAAAA==`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1570591452, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 5 mtime: 2019-11-02 18:37:45 , size: 3889
		fileName := "/template/helper.go"
		contentBase64 := `
H4sIAAAAAAAA/7RXX2sbxxd91n6K+xP4x46zlapXBRGsJKIuNBSnb5LqrFYja8lqtOyOYhkj8INjx1RJA20dagJNW7c1CXENSYvt0n4a7dr+FmX+7O7IWtkq
pU/Wzty598y5Z86MNa3VIxYQvLrg+5h+hB0XezqCeTP5hHUt0xa/iiX4vzKzPtCiqdwSXvGhBB3zIdY7plv1qWeTlfq8h1dw32XTuO+isfBq1sOd7iO8bDa6
j3C2DiWQ0Z/0fHq723FtB+sPqrX7Nb8+fyufr/kC17K6rqbX/PkaepCee2rWyWw+NT0qs02viUlzWkWbWE6vOVNJGVrT9ernqH7jFuLp1Hy2T7FXIfo4RwbE
EWx0gQ2i1GURmHjFohhIj5ZkXUrPEHmY9jwix7WBptE1F4MiggoBpiG9ZTv4ntnBIDpvgNUlFBMK1XpjjWIEuvhhAPa8rocmM7GVPYsyvVWID1CtK0Iaq6hl
uNym6ozhzOch2SGE7w6CraHYRbh7Er77Rihfb49pHSlrdKLupkXGN434scgxoCUwXReTps4/DZiGep0lLEKLDJAEeLePrR7FEO78cv79MNzZCF/unO1tzgBT
ruSsLzT8T03ankK8Af5D260QpTcIdBlzD6+C0hbZGrY1JUCe6ijOwSRajhALdNeUdHF5Jp5W14Nlxt0iaXWZe3gmWcEgaFvXMjyAscL5jedlPAvI2C0eAKWS
ug8+xTHapIfZx0CTAxEMtp0StIhKUQzuHl5FMjuL+18JiO3IrFLxxHYMaHVo7i7jpKVn53zD6nkeY5alBNsvwpyf5ZVEkI4MUKqhCNdAywySo6SCJLYTazU+
0BA8eXXx7X7w8iB8ux++2j4/PBqdfBHsPD3b2wy2HgeHJ2wBXilCLV/Lw6Ql6miquOMiMyjnH8uknWrruSXsOqaFFxwnymfIbHo2yyQ0AzEgcoI4FIakKBxu
B4d7wfD04sX7i+1hKj+THq8jGB2/vXjxPo4//+GNSJjCKDvYV/P531P570hMxy4vCAH+Sv+QkRXbwWOeq/xsdLvODHvUMkm1Ej8qrknbudsONkkCBGkZtWQ1
nqinPDB4ZW0Ke/GNrNBXYZdVTCG/ujomtdp3TGrG3RJ/uSHYzT5zJvbt5xZJE/eT+KQFOu9BhltVHP2ZZ3fuu6aFkxVVu9m/UYAid9F4FH1QqLPldouPsyyI
Od6HwpKklSleNPaKgFWbtgF3XLoGrumZnSx3HikIiVAxKSQsifeizHtRVJrxcdcWveBfd2xPaYwhNSIQMtoZ5AZvkwFt0y+zVBPN40XqN0VA5OrLfMECZ+ty
n2+KKeHH1+2eq6sI1prl2FZU3JjzY4XP+SgrjVlcAuObyFzHVeTh01Sp7BFKQL0e1tKCy9dJONO4HckSe94SNpuczW6P2k6OfbJcepxKCiYKVe8wQZmcmUEL
rHZBLV4usNLtnPrMKAvyEpDx8UqQlAvpOMqF2VBYKgj5YhVIVLuKkCSQVbITNFGCVEhycqaTEnmrrKdlBqxfk48H9emAPY9d+1dfbhHC4Ggr+PLnYH93dLwx
On59/ttmePo83N0e/fF7MHwcPH8TPDkK/vwq2HkqBi+2hylvgIgjM0ddZ9qdtTij789yZeXzcPb1wej0WfjjRvjdT8Ffr8+e/WpHxI7dG8VJ3U8cgfifjdzE
5RSju9zrgfY3AAAA//8BAAD//zR/kcTEDgAA`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572691065, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

	{
		// 6 mtime: 2019-11-02 18:26:12 , size: 2944
		fileName := "/template/helper_test.go"
		contentBase64 := `
H4sIAAAAAAAA/zyQzWrrMBCF1zNPMVcQkEEo+0AW4RJooKtuS6H+GdmmieRKk9il+N2LZNrtOZ/OJwbrlFjw3SAAnJeJWzmQKqHK2WoQVkQY+DpxpMORPM+n
XD+VRFeI4EKksVsMtXXii/Atc7H2PZck0TcCiH0OvdPKh5ni3ZdG77pKmfy2QoDGGeJYJJvOvvAtPPjUhAdrZe1eOElXS71vrCyiDL2+NV/C+tdrL366S5XH
Rle2/h3Jj9fyARB7jjFEp1XmaR5lyEyIB9olVdwbocvCigB/w/8Hbj+2+5w/tRhKEkff68ZldsUVfwAAAP//AQAA///AEt/xSgEAAA==`

		contentGz := _assetBase64Decode(contentBase64, fileName)
		oneFile := &assetFile{
			name:        fileName,
			mtime:       time.Unix(1572690372, 0),
			content:     _assetGzipDecode(contentGz, fileName),
			contentGzip: contentGz,
		}
		asset.Files[fileName] = oneFile
	}

}
