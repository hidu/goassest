/**
* generated by goassest
* https://github.com/hidu/goassest/
 */
package res

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"strings"
	"time"
)

type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

type AssestStruct struct {
	Files  map[string]*AssestFile
	Direct bool //for debug
}

func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = strings.TrimLeft(path.Clean(name), "/")
	if statics.Direct {
		f, err := os.Open(name)
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

/**
*Assest.Direct=true //for debug read it direct
*http.Handle("/res/",res.Assest.HttpHandler("/res/"))
 */
func (statics *AssestStruct) HttpHandler(pdir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: pdir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname, _ := filepath.Rel(f.pdir, r.URL.Path)
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

var Assest *AssestStruct

func init() {
	_assestGzipBase64decode := func(data string) string {
		b, _ := base64.StdEncoding.DecodeString(data)
		gr, _ := gzip.NewReader(bytes.NewBuffer(b))
		bs, _ := ioutil.ReadAll(gr)
		return string(bs)
	}

	_assestBase64Decode := func(data string) string {
		b, _ := base64.StdEncoding.DecodeString(data)
		return string(b)
	}

	Assest = &AssestStruct{
		Files: map[string]*AssestFile{

			_assestBase64Decode("cmVzL2IuY3Nz"): &AssestFile{
				Name:    _assestBase64Decode("cmVzL2IuY3Nz"),
				Mtime:   1417275726,
				Content: _assestGzipBase64decode("H4sIAAAJbogA/8owrE7LzyvRLc6sSrVSMLEoqLBOzs/JL7JKL0pNzavl4sowroYIFKWm1AIAAAD//wEAAP//9lO6yS4AAAA="),
			},

			_assestBase64Decode("cmVzL2luZGV4Lmh0bWw="): &AssestFile{
				Name:    _assestBase64Decode("cmVzL2luZGV4Lmh0bWw="),
				Mtime:   1417309139,
				Content: _assestGzipBase64decode("H4sIAAAJbogA/5SRu27zMAyF9zwFo93Rn8vwD7KWXtZ2SIdOBWOzkRMlMkSird++9KWA0S7tJOCQ5/Dgk1vePtzsnx/vIMgl+oX7eghrfS4kCFXAzCSledrfF/+NytJIJB8oxgTITCzOjtrCxeZ6hkyxNCxdJA5EYkC6lkoj9CG2YjYQMr2WxmZie1j1ijq5yk0r89UTvuGoGuBcTYYTW1yd1OLsOPyDd2YCtywK2P3bQVH8MqHFI6lhHvItxU7gDqnu/EI5ridM7ynHWsdrHbbe4U8CIJiPPeaXQ8Tr2fhBdhb1WqtZGrbxxzTyhpouSeM2w5EtNHVphkN9t7D1Q6ueElTpKnobGpkajtV0q//pTwAAAP//AQAA//8lBkWbAAIAAA=="),
			},

			_assestBase64Decode("cmVzL2pzL2EuanM="): &AssestFile{
				Name:    _assestBase64Decode("cmVzL2pzL2EuanM="),
				Mtime:   1417341750,
				Content: _assestGzipBase64decode("H4sIAAAJbogA/+IqTi0JycxNzS8t0UgrzUsuyczP09Cs5uJMyU8uzU3NK9FLTy1xzUkFMZ0qPVM0lDJSc3LylTT1MvPyUos8Qnx9bCFCOol6WcUKRkrWXLU6hgYGBprWAAAAAP//AQAA//9NRg/0XAAAAA=="),
			},
		},
	}
}
