// generated by goassest(0.5.3 20161126)
// https://github.com/hidu/goassest/

package res

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"mime"
	"net/http"
	"os"
	"path"
	"path/filepath"
	"runtime"
	"strings"
	"time"
)

// AssestFile assest file  struct
type AssestFile struct {
	Name    string
	Mtime   int64
	Content string
}

// AssestStruct assest files
type AssestStruct struct {
	Files map[string]*AssestFile
}

var _assestDirect bool

func init() {
	exeName := filepath.Base(os.Getenv("_"))
	//only enable with go run
	if exeName == "go" || (runtime.GOOS == "windows" && strings.Contains(os.Args[0], "go-build")) {
		flag.BoolVar(&_assestDirect, "assest_direct", false, "for debug,read assest direct")
	}
}

var _assestCwd, _ = os.Getwd()

// GetAssestFile get file by name
func (statics *AssestStruct) GetAssestFile(name string) (*AssestFile, error) {
	name = filepath.ToSlash(name)
	if name != "" && name[0] != '/' {
		name = "/" + name
	}
	if _assestDirect {
		f, err := os.Open(filepath.Join(_assestCwd, name))
		if err != nil {
			return nil, err
		}
		defer f.Close()
		info, err := f.Stat()
		if err != nil {
			return nil, err
		}
		if info.Mode().IsRegular() {
			content, err := ioutil.ReadAll(f)
			if err != nil {
				return nil, err
			}
			return &AssestFile{
				Content: string(content),
				Name:    name,
				Mtime:   info.ModTime().Unix(),
			}, nil
		}
		return nil, fmt.Errorf("not file")
	}
	if sf, has := statics.Files[name]; has {
		return sf, nil
	}
	return nil, fmt.Errorf("not exists")
}

// GetContent get content by name
func (statics AssestStruct) GetContent(name string) string {
	s, err := statics.GetAssestFile(name)
	if err != nil {
		return ""
	}
	return s.Content
}

// GetFileNames get all file names
func (statics AssestStruct) GetFileNames(dir string) []string {
	if dir == "" {
		dir = "/"
	}
	names := make([]string, len(statics.Files))
	dirRaw := dir
	dir = path.Clean(dir)

	if dir != "/" && strings.HasSuffix(dirRaw, "/") {
		dir += string(filepath.Separator)
	}

	dir = filepath.ToSlash(dir)

	for name := range statics.Files {
		if strings.HasPrefix(name, dir) {
			names = append(names, name)
		}
	}
	return names
}

// FileHandlerFunc handler http files
func (statics *AssestStruct) FileHandlerFunc(name string) http.HandlerFunc {
	if strings.Contains(name, "private") {
		return http.NotFound
	}
	name = filepath.ToSlash(name)
	static, err := statics.GetAssestFile(name)
	return func(w http.ResponseWriter, r *http.Request) {
		if err != nil {
			http.NotFound(w, r)
			return
		}
		modtime := time.Unix(static.Mtime, 0)
		modifiedSince := r.Header.Get("If-Modified-Since")
		if modifiedSince != "" {
			t, err := time.Parse(http.TimeFormat, modifiedSince)
			if err == nil && modtime.Before(t.Add(1*time.Second)) {
				w.Header().Del("Content-Type")
				w.Header().Del("Content-Length")
				w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
				w.WriteHeader(http.StatusNotModified)
				return
			}
		}

		mimeType := mime.TypeByExtension(filepath.Ext(static.Name))
		if mimeType != "" {
			w.Header().Set("Content-Type", mimeType)
		}
		w.Header().Set("Last-Modified", modtime.UTC().Format(http.TimeFormat))
		w.Write([]byte(static.Content))
	}
}

// HTTPHandler handler http request
//eg:on file system is :/res/js/a.js and request is /res/js/a.js
//http.Handle("/res/",res.Assest.HttpHandler("/"))

//eg:on file system is :/res/js/a.js and request is /js/a.js
//http.Handle("/js/",res.Assest.HttpHandler("/res/"))
func (statics *AssestStruct) HTTPHandler(baseDir string) http.Handler {
	return &_assestFileServer{sf: statics, pdir: baseDir}
}

type _assestFileServer struct {
	sf   *AssestStruct
	pdir string
}

// ServeHTTP ServeHTTP
func (f *_assestFileServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	rname := filepath.ToSlash(filepath.Join(f.pdir, r.URL.Path))
	f.sf.FileHandlerFunc(rname).ServeHTTP(w, r)
}

func _assestGzipBase64decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	gr, _ := gzip.NewReader(bytes.NewBuffer(b))
	bs, _ := ioutil.ReadAll(gr)
	return string(bs)
}

func _assestBase64Decode(data string) string {
	b, _ := base64.StdEncoding.DecodeString(data)
	return string(b)
}

// Assest export assests
var Assest = &AssestStruct{
	Files: map[string]*AssestFile{

		_assestBase64Decode("L3Jlcy9iLmNzcw=="): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9iLmNzcw=="),
			Mtime:   1440515205,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/8owrE7LzyvRLc6sSrUysSiosE7Oz8kvskovSk3Nq80wroZwi1JTajNMkDgAAAAA//8BAAD///xF3Xc4AAAA"),
		},

		_assestBase64Decode("L3Jlcy9pbmRleC5odG1s"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9pbmRleC5odG1s"),
			Mtime:   1464878935,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/5yTv2+7MBDFd/6Ki3fi/GD4DoeXb9u1HdKhU2XMEUOcGNmntvnvK0MqkTRSo0xIx+fde/BsnD08/9+8vTyC5b1TGf48SNcqwz2xBmN1iMSleN085f+EypBbdqQsOedBx0iRUY6zDF172EEgV4rIR0fRErEAPvZUCqYvliZGATZQUwoZKMpqniYqw2hC2/MU7fSHHqcCYjAnQRelnndRKJTjyxu1XfK6S7eSzYXwNmVkza1JxuYuffraiQpwludQLArI8xuz93pLxaKYLrnYIk9VV74+plx2eSr20wdXo7RLlWGvUP/uDFiHbToY75XTh51QwxilVih7laVlK7X14wmBmvYepV0NJmto61IMRimbXashVeoVjD+wDw5aHhKe03k15asr/Dluprj5E2+meHMNl+OPQjnclG8AAAD//wEAAP//NBTbpEADAAA="),
		},

		_assestBase64Decode("L3Jlcy9qcy9hLmpz"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9qcy9hLmpz"),
			Mtime:   1440515205,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/ypOLQnJzE3NLy3RSCvNSy7JzM/T0KxOyU8uzU3NK9FLTy1xzUkFMZ0qPVM0lDJSc3LylTT1MvPyUos8Qnx9bCFCOol6WcUKRkrWtTqGBgYGmtYAAAAA//8BAAD//4rtx7JYAAAA"),
		},

		_assestBase64Decode("L3Jlcy9qcy9iLmpz"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9qcy9iLmpz"),
			Mtime:   1463832956,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/ypOLQnJzE3NLy3RSCvNSy7JzM/T0KxOyU8uzU3NK9FLTy1xzUkFMZ0qPVM0lDJSc3LydZOUNPUy8/JSizxCfH1sIYI6SXpZxQpGSta1OoYGBgaa1gAAAAD//wEAAP//8g4AUloAAAA="),
		},

		_assestBase64Decode("L3Jlcy9qcy9jLmpz"): &AssestFile{
			Name:    _assestBase64Decode("L3Jlcy9qcy9jLmpz"),
			Mtime:   1463833139,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/ypOLQnJzE3NLy3RSCvNSy7JzM/T0KxOyU8uzU3NK9FLTy1xzUkFMZ0qPVM0lDJSc3LydZOVNPUy8/JSizxCfH1sIYI6yXpZxQpGSta1OoYGBgaa1gAAAAD//wEAAP//fIiYfFoAAAA="),
		},

		_assestBase64Decode("L3JlczIvZi5qcw=="): &AssestFile{
			Name:    _assestBase64Decode("L3JlczIvZi5qcw=="),
			Mtime:   1464878943,
			Content: _assestGzipBase64decode("H4sIAAAJbogA/ypOLQnJzE3NLy3RSCvNSy7JzM/T0KxOyU8uzU3NK9FLTy1xzUkFMZ0qPVM0lDJSc3LyddOUNPUy8/JSizxCfH1sIYI6aXpZxQqmSta1OoYGBgaa1gAAAAD//wEAAP//SQFZwVoAAAA="),
		},
	},
}
