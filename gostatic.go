package main

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"text/template"
)

var outFileName = "static.go"

var tpl = template.Must(template.New("static").Parse(`
/**
* generated by gostatic
* https://github.com/hidu/gostatic/
*/
package {{.package}}

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"io/ioutil"
	"fmt"
)

type StaticFile struct{
	Name string
	Mtime int64
	Content string
}

type StaticFiles map[string]*StaticFile

func (statics *StaticFiles)GetStaticFile(name string) (*StaticFile,error){
	if sf,has:=statics[name];has{
		return sf,nil
	}
	return nil,fmt.Errorf("not exists")
}

func decode(data string)string{
  b,_:=base64.StdEncoding.DecodeString(data)
  gr, _:= gzip.NewReader(bytes.NewBuffer(b))
  bs, _ := ioutil.ReadAll(gr)
  return string(bs)
}

func base64decode(data string)string{
   b,_:=base64.StdEncoding.DecodeString([]byte(data))
   return string(b)
}

var Files=StaticFiles{
   {{range $file := .files}}
      base64decode("{{$file.Name}}"):&StaticFile{
         Name:base64decode("{{$file.Name}}"),
         Mtime:{{$file.Mtime}},
         Content:decode("{{$file.Content}}"),
       },
	{{end}}
}

`))

type staticFile struct {
	Name       string
	NameOrigin string
	Mtime      int64
	Content    string
	Md5        string
}

var files []staticFile

func encode(data []byte) string {
	var buf bytes.Buffer
	gw := gzip.NewWriter(&buf)
	gw.Write(data)
	gw.Flush()
	gw.Close()
	return base64.StdEncoding.EncodeToString(buf.Bytes())
}

func walkerFor(basePath string) filepath.WalkFunc {
//	baseName:=filepath.Base(basePath)
	
	return func(name string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if info.Mode().IsRegular() {
			nameRel, _ := filepath.Rel(basePath, name)
			if isIgnoreFile(nameRel) {
				return nil
			}
			data, ferr := ioutil.ReadFile(name)
			if ferr != nil {
				return ferr
			}
//			nameSlash:=filepath.ToSlash(filepath.Clean(baseName+string(os.PathSeparator)+nameRel))
			nameSlash:=filepath.ToSlash(nameRel)
			files = append(files, staticFile{
				Name:       base64.StdEncoding.EncodeToString([]byte(nameSlash)),
				NameOrigin: nameSlash,
				Content:    encode(data),
				Mtime:      info.ModTime().Unix(),
			})
		}

		return nil
	}
}
func isIgnoreFile(name string) bool {
	if name == outFileName {
		return true
	}
	subNames := strings.Split(name, "/")
	for _, n := range subNames {
		if n[:1] == "." {
			return true
		}
	}
	return false
}

func main() {
	flag.Usage = func() {
		fmt.Println("useage:")
		fmt.Println("\tgostatic", " [static dir path]")
		fmt.Println("\nhttps://github.com/hidu/gostatic/\n")
		flag.PrintDefaults()
	}
	flag.Parse()
	dirOrigin := flag.Arg(0)
	if dirOrigin == "" {
		flag.Usage()
		os.Exit(1)
	}
	dir, err := filepath.Abs(dirOrigin)
	if err != nil {
		fmt.Println("wrong dir")
		return
	}

	filepath.Walk(dir, walkerFor(dir))
	var buf bytes.Buffer
	datas := make(map[string]interface{})
	datas["files"] = files
	datas["package"] = filepath.Base(dir)

	tpl.Execute(&buf, datas)
	outFilePath := dir + string(os.PathSeparator) + outFileName

	err = ioutil.WriteFile(outFilePath, buf.Bytes(), 0655)
	if err == nil {
		fmt.Println("total ", len(files), "files")
		fmt.Println(strings.Repeat("-", 80))
		for _, staticFile := range files {
			fmt.Println("add", staticFile.NameOrigin)
		}
		fmt.Println(strings.Repeat("-", 80))
		fmt.Println("create ", filepath.Clean(dirOrigin+string(os.PathSeparator)+outFileName), "success")
	} else {
		fmt.Println("failed", err)
		os.Exit(2)
	}
}
